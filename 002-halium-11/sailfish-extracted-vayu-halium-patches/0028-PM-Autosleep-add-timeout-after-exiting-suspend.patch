From 6bf37b3413553d3aba3a8eb1416d19e2638f3d7b Mon Sep 17 00:00:00 2001
From: Rinigus <rinigus.git@gmail.com>
Date: Mon, 11 Nov 2019 23:16:02 +0200
Subject: [PATCH 28/35] PM / Autosleep: add timeout after exiting suspend

By adding uninterruptible timeout after exiting suspend, it avoids
entering new automatic suspend without any delay. This allows to
other processes to respond to the exit from suspend and is required
in some cases to make automatic suspend to work and not get cancelled
by wakelocks filed by other threads during the next suspend attempt.
---
 kernel/power/autosleep.c | 16 ++++++++++------
 1 file changed, 10 insertions(+), 6 deletions(-)

diff --git a/kernel/power/autosleep.c b/kernel/power/autosleep.c
index 9af5a50d3489..36732cc5b5cc 100644
--- a/kernel/power/autosleep.c
+++ b/kernel/power/autosleep.c
@@ -27,6 +27,7 @@ static struct wakeup_source *autosleep_ws;
 static void try_to_suspend(struct work_struct *work)
 {
 	unsigned int initial_count, final_count;
+	int error;
 
 	if (!pm_get_wakeup_count(&initial_count, true))
 		goto out;
@@ -44,23 +45,26 @@ static void try_to_suspend(struct work_struct *work)
 		return;
 	}
 	if (autosleep_state >= PM_SUSPEND_MAX)
-		hibernate();
+		error = hibernate();
 	else
-		pm_suspend(autosleep_state);
+		error = pm_suspend(autosleep_state);
 
 	mutex_unlock(&autosleep_lock);
 
-	if (!pm_get_wakeup_count(&final_count, false))
-		goto out;
+	if (!error)
+		error = pm_get_wakeup_count(&final_count, false);
 
 	/*
 	 * If the wakeup occured for an unknown reason, wait to prevent the
 	 * system from trying to suspend and waking up in a tight loop.
+	 * Add extra wait in this case.
 	 */
-	if (final_count == initial_count)
-		schedule_timeout_uninterruptible(HZ / 2);
+	if (error || final_count == initial_count)
+		schedule_timeout_uninterruptible(msecs_to_jiffies(250));
 
  out:
+	/* always add timeout to prevent tight loop of suspend and waking up */
+	schedule_timeout_uninterruptible(msecs_to_jiffies(250));
 	queue_up_suspend_work();
 }
 
-- 
2.39.2

